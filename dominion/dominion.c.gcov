        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test message
        -:    9:
        -:   10:int smithyEffect(struct gameState *state, int currentPlayer, int handPos);
        -:   11:
        -:   12:int council_room_effect(struct gameState *state, int currentPlayer, int handPos);
        -:   13:
        -:   14:int adventurerEffect(struct gameState *state, int currentPlayer);
        -:   15:
        -:   16:int feastEffect(struct gameState *state, int currentPlayer, int choice1);
        -:   17:
        -:   18:int gardenEffect();
        -:   19:
        -:   20:
        -:   21:int compare(const void* a, const void* b) {
      280:   22:  if (*(int*)a > *(int*)b)
    #####:   23:    return 1;
      280:   24:  if (*(int*)a < *(int*)b)
      100:   25:    return -1;
      180:   26:  return 0;
      280:   27:}
        -:   28:
        -:   29:struct gameState* newGame() {
    #####:   30:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   31:  return g;
        -:   32:}
        -:   33:
        -:   34:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   35:		  int k8, int k9, int k10) {
    #####:   36:  int* k = malloc(10 * sizeof(int));
    #####:   37:  k[0] = k1;
    #####:   38:  k[1] = k2;
    #####:   39:  k[2] = k3;
    #####:   40:  k[3] = k4;
    #####:   41:  k[4] = k5;
    #####:   42:  k[5] = k6;
    #####:   43:  k[6] = k7;
    #####:   44:  k[7] = k8;
    #####:   45:  k[8] = k9;
    #####:   46:  k[9] = k10;
    #####:   47:  return k;
        -:   48:}
        -:   49:
        -:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:		   struct gameState *state) {
        -:   52:
        -:   53:  int i;
        -:   54:  int j;
        -:   55:  int it;			
        -:   56:  //set up random number generator
       10:   57:  SelectStream(1);
       10:   58:  PutSeed((long)randomSeed);
        -:   59:  
        -:   60:  //check number of players
       20:   61:  if (numPlayers > MAX_PLAYERS || numPlayers < 0)
        -:   62:    {
    #####:   63:      return -1;
        -:   64:    }
        -:   65:
        -:   66:  //set number of players
       10:   67:  state->numPlayers = numPlayers;
        -:   68:
        -:   69:  //check selected kingdom cards are different
      220:   70:  for (i = 0; i < 10; i++)
        -:   71:    {
     2200:   72:      for (j = 0; j < 10; j++)
        -:   73:        {
     1900:   74:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   75:	    {
    #####:   76:	      return -1;
        -:   77:	    }
     1000:   78:        }
      100:   79:    }
        -:   80:
        -:   81:
        -:   82:  //initialize supply
        -:   83:  ///////////////////////////////
        -:   84:
        -:   85:  //set number of Curse cards
       10:   86:  if (numPlayers == 2)
        -:   87:    {
       10:   88:      state->supplyCount[curse] = 10;
       10:   89:    }
    #####:   90:  else if (numPlayers == 3)
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 20;
    #####:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Victory cards
       10:  100:  if (numPlayers == 2)
        -:  101:    {
       10:  102:      state->supplyCount[estate] = 8;
       10:  103:      state->supplyCount[duchy] = 8;
       10:  104:      state->supplyCount[province] = 8;
       10:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      state->supplyCount[estate] = 12;
    #####:  109:      state->supplyCount[duchy] = 12;
    #####:  110:      state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:  //set number of Treasure cards
       10:  114:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  115:  state->supplyCount[silver] = 40;
       10:  116:  state->supplyCount[gold] = 30;
        -:  117:
        -:  118:  //set number of Kingdom cards
      420:  119:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
     3300:  121:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:	{
     1550:  123:	  if (kingdomCards[j] == i)
        -:  124:	    {
        -:  125:	      //check if card is a 'Victory' Kingdom card
      192:  126:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  127:		{
       16:  128:		  if (numPlayers == 2){ 
       16:  129:		    state->supplyCount[i] = 8; 
       16:  130:		  }
    #####:  131:		  else{ state->supplyCount[i] = 12; }
       16:  132:		}
        -:  133:	      else
        -:  134:		{
       84:  135:		  state->supplyCount[i] = 10;
        -:  136:		}
      100:  137:	      break;
        -:  138:	    }
        -:  139:	  else    //card is not in the set choosen for the game
        -:  140:	    {
     1450:  141:	      state->supplyCount[i] = -1;
        -:  142:	    }
     1450:  143:	}
        -:  144:
      200:  145:    }
        -:  146:
        -:  147:  ////////////////////////
        -:  148:  //supply intilization complete
        -:  149:
        -:  150:  //set player decks
       60:  151:  for (i = 0; i < numPlayers; i++)
        -:  152:    {
       20:  153:      state->deckCount[i] = 0;
      160:  154:      for (j = 0; j < 3; j++)
        -:  155:	{
       60:  156:	  state->deck[i][j] = estate;
       60:  157:	  state->deckCount[i]++;
       60:  158:	}
      320:  159:      for (j = 3; j < 10; j++)
        -:  160:	{
      140:  161:	  state->deck[i][j] = copper;
      140:  162:	  state->deckCount[i]++;		
      140:  163:	}
       20:  164:    }
        -:  165:
        -:  166:  //shuffle player decks
       60:  167:  for (i = 0; i < numPlayers; i++)
        -:  168:    {
       20:  169:      if ( shuffle(i, state) < 0 )
        -:  170:	{
    #####:  171:	  return -1;
        -:  172:	}
       20:  173:    }
        -:  174:
        -:  175:  //draw player hands
       60:  176:  for (i = 0; i < numPlayers; i++)
        -:  177:    {  
        -:  178:      //initialize hand size to zero
       20:  179:      state->handCount[i] = 0;
       20:  180:      state->discardCount[i] = 0;
        -:  181:      //draw 5 cards
        -:  182:      // for (j = 0; j < 5; j++)
        -:  183:      //	{
        -:  184:      //	  drawCard(i, state);
        -:  185:      //	}
       20:  186:    }
        -:  187:  
        -:  188:  //set embargo tokens to 0 for all supply piles
      560:  189:  for (i = 0; i <= treasure_map; i++)
        -:  190:    {
      270:  191:      state->embargoTokens[i] = 0;
      270:  192:    }
        -:  193:
        -:  194:  //initialize first player's turn
       10:  195:  state->outpostPlayed = 0;
       10:  196:  state->phase = 0;
       10:  197:  state->numActions = 1;
       10:  198:  state->numBuys = 1;
       10:  199:  state->playedCardCount = 0;
       10:  200:  state->whoseTurn = 0;
       10:  201:  state->handCount[state->whoseTurn] = 0;
        -:  202:  //int it; move to top
        -:  203:
        -:  204:  //Moved draw cards to here, only drawing at the start of a turn
      120:  205:  for (it = 0; it < 5; it++){
       50:  206:    drawCard(state->whoseTurn, state);
       50:  207:  }
        -:  208:
       10:  209:  updateCoins(state->whoseTurn, state, 0);
        -:  210:
       10:  211:  return 0;
       10:  212:}
        -:  213:
        -:  214:int shuffle(int player, struct gameState *state) {
        -:  215: 
        -:  216:
        -:  217:  int newDeck[MAX_DECK];
       20:  218:  int newDeckPos = 0;
        -:  219:  int card;
        -:  220:  int i;
        -:  221:
       20:  222:  if (state->deckCount[player] < 1)
    #####:  223:    return -1;
       20:  224:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  225:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  226:
      440:  227:  while (state->deckCount[player] > 0) {
      200:  228:    card = floor(Random() * state->deckCount[player]);
      200:  229:    newDeck[newDeckPos] = state->deck[player][card];
      200:  230:    newDeckPos++;
     1160:  231:    for (i = card; i < state->deckCount[player]-1; i++) {
      380:  232:      state->deck[player][i] = state->deck[player][i+1];
      380:  233:    }
      200:  234:    state->deckCount[player]--;
        -:  235:  }
      440:  236:  for (i = 0; i < newDeckPos; i++) {
      200:  237:    state->deck[player][i] = newDeck[i];
      200:  238:    state->deckCount[player]++;
      200:  239:  }
        -:  240:
       20:  241:  return 0;
       20:  242:}
        -:  243:
        -:  244:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  245:{	
        -:  246:  int card;
    #####:  247:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  248:
        -:  249:  //check if it is the right phase
    #####:  250:  if (state->phase != 0)
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //check if player has enough actions
    #####:  256:  if ( state->numActions < 1 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //get card played
    #####:  262:  card = handCard(handPos, state);
        -:  263:	
        -:  264:  //check if selected card is an action
    #####:  265:  if ( card < adventurer || card > treasure_map )
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //play card
    #####:  271:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  272:    {
    #####:  273:      return -1;
        -:  274:    }
        -:  275:	
        -:  276:  //reduce number of actions
    #####:  277:  state->numActions--;
        -:  278:
        -:  279:  //update coins (Treasure cards may be added with card draws)
    #####:  280:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  281:	
    #####:  282:  return 0;
    #####:  283:}
        -:  284:
        -:  285:int buyCard(int supplyPos, struct gameState *state) {
        -:  286:  int who;
        -:  287:  if (DEBUG){
        -:  288:    printf("Entering buyCard...\n");
        -:  289:  }
        -:  290:
        -:  291:  // I don't know what to do about the phase thing.
        -:  292:
        6:  293:  who = state->whoseTurn;
        -:  294:
        6:  295:  if (state->numBuys < 1){
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        6:  299:  } else if (supplyCount(supplyPos, state) <1){
        -:  300:    if (DEBUG)
        -:  301:      printf("There are not any of that type of card left\n");
        2:  302:    return -1;
        4:  303:  } else if (state->coins < getCost(supplyPos)){
        -:  304:    if (DEBUG)
        -:  305:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  306:    return -1;
        -:  307:  } else {
        2:  308:    state->phase=1;
        -:  309:    //state->supplyCount[supplyPos]--;
        2:  310:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  311:
        2:  312:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  313:    state->numBuys--;
        -:  314:    if (DEBUG)
        -:  315:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  316:  }
        -:  317:
        -:  318:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  319:  //state->discardCount[who]++;
        -:  320:
        2:  321:  return 0;
        6:  322:}
        -:  323:
        -:  324:int numHandCards(struct gameState *state) {
    #####:  325:  return state->handCount[ whoseTurn(state) ];
        -:  326:}
        -:  327:
        -:  328:int handCard(int handPos, struct gameState *state) {
    #####:  329:  int currentPlayer = whoseTurn(state);
    #####:  330:  return state->hand[currentPlayer][handPos];
        -:  331:}
        -:  332:
        -:  333:int supplyCount(int card, struct gameState *state) {
        8:  334:  return state->supplyCount[card];
        -:  335:}
        -:  336:
        -:  337:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  338:  int i;
       50:  339:  int count = 0;
        -:  340:
     1600:  341:  for (i = 0; i < state->deckCount[player]; i++)
        -:  342:    {
      750:  343:      if (state->deck[player][i] == card) count++;
      750:  344:    }
        -:  345:
      600:  346:  for (i = 0; i < state->handCount[player]; i++)
        -:  347:    {
      250:  348:      if (state->hand[player][i] == card) count++;
      250:  349:    }
        -:  350:
     1100:  351:  for (i = 0; i < state->discardCount[player]; i++)
        -:  352:    {
      500:  353:      if (state->discard[player][i] == card) count++;
      500:  354:    }
        -:  355:
       50:  356:  return count;
        -:  357:}
        -:  358:
        -:  359:int whoseTurn(struct gameState *state) {
        2:  360:  return state->whoseTurn;
        -:  361:}
        -:  362:
        -:  363:int endTurn(struct gameState *state) {
        -:  364:  int k;
        -:  365:  int i;
    #####:  366:  int currentPlayer = whoseTurn(state);
        -:  367:  
        -:  368:  //Discard hand
    #####:  369:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  370:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  371:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  372:  }
    #####:  373:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  374:    
        -:  375:  //Code for determining the player
    #####:  376:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  377:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  378:  }
        -:  379:  else{
    #####:  380:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  381:  }
        -:  382:
    #####:  383:  state->outpostPlayed = 0;
    #####:  384:  state->phase = 0;
    #####:  385:  state->numActions = 1;
    #####:  386:  state->coins = 0;
    #####:  387:  state->numBuys = 1;
    #####:  388:  state->playedCardCount = 0;
    #####:  389:  state->handCount[state->whoseTurn] = 0;
        -:  390:
        -:  391:  //int k; move to top
        -:  392:  //Next player draws hand
    #####:  393:  for (k = 0; k < 5; k++){
    #####:  394:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  395:  }
        -:  396:
        -:  397:  //Update money
    #####:  398:  updateCoins(state->whoseTurn, state , 0);
        -:  399:
    #####:  400:  return 0;
        -:  401:}
        -:  402:
        -:  403:int isGameOver(struct gameState *state) {
        -:  404:  int i;
        -:  405:  int j;
        -:  406:	
        -:  407:  //if stack of Province cards is empty, the game ends
        6:  408:  if (state->supplyCount[province] == 0)
        -:  409:    {
        4:  410:      return 1;
        -:  411:    }
        -:  412:
        -:  413:  //if three supply pile are at 0, the game ends
        2:  414:  j = 0;
      104:  415:  for (i = 0; i < 25; i++)
        -:  416:    {
       50:  417:      if (state->supplyCount[i] == 0)
        -:  418:	{
    #####:  419:	  j++;
    #####:  420:	}
       50:  421:    }
        2:  422:  if ( j >= 3)
        -:  423:    {
    #####:  424:      return 1;
        -:  425:    }
        -:  426:
        2:  427:  return 0;
        6:  428:}
        -:  429:
        -:  430:int scoreFor (int player, struct gameState *state) {
        -:  431:
        -:  432:  int i;
        6:  433:  int score = 0;
        -:  434:  //score from hand
       72:  435:  for (i = 0; i < state->handCount[player]; i++)
        -:  436:    {
       30:  437:      if (state->hand[player][i] == curse) { score = score - 1; };
       40:  438:      if (state->hand[player][i] == estate) { score = score + 1; };
       30:  439:      if (state->hand[player][i] == duchy) { score = score + 3; };
       30:  440:      if (state->hand[player][i] == province) { score = score + 6; };
       40:  441:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       40:  442:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       30:  443:    }
        -:  444:
        -:  445:  //score from discard
      132:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
       60:  448:      if (state->discard[player][i] == curse) { score = score - 1; };
       80:  449:      if (state->discard[player][i] == estate) { score = score + 1; };
       60:  450:      if (state->discard[player][i] == duchy) { score = score + 3; };
       60:  451:      if (state->discard[player][i] == province) { score = score + 6; };
       80:  452:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       80:  453:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       60:  454:    }
        -:  455:
        -:  456:  //score from deck
      132:  457:  for (i = 0; i < state->discardCount[player]; i++)
        -:  458:    {
       60:  459:      if (state->deck[player][i] == curse) { score = score - 1; };
       80:  460:      if (state->deck[player][i] == estate) { score = score + 1; };
       60:  461:      if (state->deck[player][i] == duchy) { score = score + 3; };
       60:  462:      if (state->deck[player][i] == province) { score = score + 6; };
       80:  463:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       80:  464:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       60:  465:    }
        -:  466:
        6:  467:  return score;
        -:  468:}
        -:  469:
        -:  470:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  471:  int i;	
        -:  472:  int j;
        -:  473:  int highScore;
        -:  474:  int currentPlayer;
        -:  475:
        -:  476:  //get score for each player
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
        -:  479:      //set unused player scores to -9999
    #####:  480:      if (i >= state->numPlayers)
        -:  481:	{
    #####:  482:	  players[i] = -9999;
    #####:  483:	}
        -:  484:      else
        -:  485:	{
    #####:  486:	  players[i] = scoreFor (i, state);
        -:  487:	}
    #####:  488:    }
        -:  489:
        -:  490:  //find highest score
    #####:  491:  j = 0;
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if (players[i] > players[j])
        -:  495:	{
    #####:  496:	  j = i;
    #####:  497:	}
    #####:  498:    }
    #####:  499:  highScore = players[j];
        -:  500:
        -:  501:  //add 1 to players who had less turns
    #####:  502:  currentPlayer = whoseTurn(state);
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] == highScore && i > currentPlayer )
        -:  506:	{
    #####:  507:	  players[i]++;
    #####:  508:	}
    #####:  509:    }
        -:  510:
        -:  511:  //find new highest score
    #####:  512:  j = 0;
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] > players[j] )
        -:  516:	{
    #####:  517:	  j = i;
    #####:  518:	}
    #####:  519:    }
    #####:  520:  highScore = players[j];
        -:  521:
        -:  522:  //set winners in array to 1 and rest to 0
    #####:  523:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  524:    {
    #####:  525:      if ( players[i] == highScore )
        -:  526:	{
    #####:  527:	  players[i] = 1;
    #####:  528:	}
        -:  529:      else
        -:  530:	{
    #####:  531:	  players[i] = 0;
        -:  532:	}
    #####:  533:    }
        -:  534:
    #####:  535:  return 0;
        -:  536:}
        -:  537:
        -:  538:int drawCard(int player, struct gameState *state)
        -:  539:{	int count;
        -:  540:  int deckCounter;
       62:  541:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  542:    
        -:  543:    //Step 1 Shuffle the discard pile back into a deck
        -:  544:    int i;
        -:  545:    //Move discard to deck
    #####:  546:    for (i = 0; i < state->discardCount[player];i++){
    #####:  547:      state->deck[player][i] = state->discard[player][i];
    #####:  548:      state->discard[player][i] = -1;
    #####:  549:    }
        -:  550:
    #####:  551:    state->deckCount[player] = state->discardCount[player];
    #####:  552:    state->discardCount[player] = 0;//Reset discard
        -:  553:
        -:  554:    //Shufffle the deck
    #####:  555:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  556:   
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  559:    }
        -:  560:    
    #####:  561:    state->discardCount[player] = 0;
        -:  562:
        -:  563:    //Step 2 Draw Card
    #####:  564:    count = state->handCount[player];//Get current player's hand count
        -:  565:    
        -:  566:    if (DEBUG){//Debug statements
        -:  567:      printf("Current hand count: %d\n", count);
        -:  568:    }
        -:  569:    
    #####:  570:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  571:
    #####:  572:    if (deckCounter == 0)
    #####:  573:      return -1;
        -:  574:
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
    #####:  578:  }
        -:  579:
        -:  580:  else{
       62:  581:    int count = state->handCount[player];//Get current hand count for player
        -:  582:    int deckCounter;
        -:  583:    if (DEBUG){//Debug statements
        -:  584:      printf("Current hand count: %d\n", count);
        -:  585:    }
        -:  586:
       62:  587:    deckCounter = state->deckCount[player];//Create holder for the deck count
       62:  588:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       62:  589:    state->deckCount[player]--;
       62:  590:    state->handCount[player]++;//Increment hand count
        -:  591:  }
        -:  592:
       62:  593:  return 0;
       62:  594:}
        -:  595:
        -:  596:int getCost(int cardNumber)
        -:  597:{
        9:  598:  switch( cardNumber ) 
        -:  599:    {
        -:  600:    case curse:
        1:  601:      return 0;
        -:  602:    case estate:
        6:  603:      return 2;
        -:  604:    case duchy:
    #####:  605:      return 5;
        -:  606:    case province:
    #####:  607:      return 8;
        -:  608:    case copper:
        1:  609:      return 0;
        -:  610:    case silver:
        1:  611:      return 3;
        -:  612:    case gold:
    #####:  613:      return 6;
        -:  614:    case adventurer:
    #####:  615:      return 6;
        -:  616:    case council_room:
    #####:  617:      return 5;
        -:  618:    case feast:
    #####:  619:      return 4;
        -:  620:    case gardens:
    #####:  621:      return 4;
        -:  622:    case mine:
    #####:  623:      return 5;
        -:  624:    case remodel:
    #####:  625:      return 4;
        -:  626:    case smithy:
    #####:  627:      return 4;
        -:  628:    case village:
    #####:  629:      return 3;
        -:  630:    case baron:
    #####:  631:      return 4;
        -:  632:    case great_hall:
    #####:  633:      return 3;
        -:  634:    case minion:
    #####:  635:      return 5;
        -:  636:    case steward:
    #####:  637:      return 3;
        -:  638:    case tribute:
    #####:  639:      return 5;
        -:  640:    case ambassador:
    #####:  641:      return 3;
        -:  642:    case cutpurse:
    #####:  643:      return 4;
        -:  644:    case embargo: 
    #####:  645:      return 2;
        -:  646:    case outpost:
    #####:  647:      return 5;
        -:  648:    case salvager:
    #####:  649:      return 4;
        -:  650:    case sea_hag:
    #####:  651:      return 4;
        -:  652:    case treasure_map:
    #####:  653:      return 4;
        -:  654:    }
        -:  655:	
    #####:  656:  return -1;
        9:  657:}
        -:  658:
        -:  659:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  660:{
        -:  661:  int i;
        -:  662:  int j;
        -:  663:  int k;
        -:  664:  int x;
        -:  665:  int index;
        2:  666:  int currentPlayer = whoseTurn(state);
        2:  667:  int nextPlayer = currentPlayer + 1;
        -:  668:
        2:  669:  int tributeRevealedCards[2] = {-1, -1};
        -:  670:  int temphand[MAX_HAND];// moved above the if statement
        2:  671:  int drawntreasure=0;
        -:  672:  int cardDrawn;
        2:  673:  int z = 0;// this is the counter for the temp hand
        2:  674:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  675:    nextPlayer = 0;
    #####:  676:  }
        -:  677:  //uses switch to select card and perform actions
        2:  678:  switch( card ) 
        -:  679:    {
        -:  680:		  
        -:  681:   case adventurer:
    #####:  682:	return adventurerEffect(state, currentPlayer);
        -:  683:			
        -:  684:    case council_room:
        2:  685:		return council_room_effect(state, currentPlayer, handPos);
        -:  686:			
        -:  687:    case feast:
    #####:  688:		return feastEffect(state, currentPlayer, choice1);
        -:  689:			
        -:  690:    case gardens:
    #####:  691:      return gardenEffect();
        -:  692:			
        -:  693:    case mine:
    #####:  694:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  695:
    #####:  696:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:		
    #####:  701:      if (choice2 > treasure_map || choice2 < curse)
        -:  702:	{
    #####:  703:	  return -1;
        -:  704:	}
        -:  705:
    #####:  706:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  707:	{
    #####:  708:	  return -1;
        -:  709:	}
        -:  710:
    #####:  711:      gainCard(choice2, state, 2, currentPlayer);
        -:  712:
        -:  713:      //discard card from hand
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:
        -:  716:      //discard trashed card
    #####:  717:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  718:	{
    #####:  719:	  if (state->hand[currentPlayer][i] == j)
        -:  720:	    {
    #####:  721:	      discardCard(i, currentPlayer, state, 0);			
    #####:  722:	      break;
        -:  723:	    }
    #####:  724:	}
        -:  725:			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case remodel:
    #####:  729:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  732:	{
    #####:  733:	  return -1;
        -:  734:	}
        -:  735:
    #####:  736:      gainCard(choice2, state, 0, currentPlayer);
        -:  737:
        -:  738:      //discard card from hand
    #####:  739:      discardCard(handPos, currentPlayer, state, 0);
        -:  740:
        -:  741:      //discard trashed card
    #####:  742:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  743:	{
    #####:  744:	  if (state->hand[currentPlayer][i] == j)
        -:  745:	    {
    #####:  746:	      discardCard(i, currentPlayer, state, 0);			
    #####:  747:	      break;
        -:  748:	    }
    #####:  749:	}
        -:  750:
        -:  751:
    #####:  752:      return 0;
        -:  753:		
        -:  754:    case smithy:
        -:  755:      //+3 Cards
    #####:  756:      return smithyEffect(state, currentPlayer, handPos);
        -:  757:      
        -:  758:		
        -:  759:    case village:
        -:  760:      //+1 Card
    #####:  761:      drawCard(currentPlayer, state);
        -:  762:			
        -:  763:      //+2 Actions
    #####:  764:      state->numActions = state->numActions + 2;
        -:  765:			
        -:  766:      //discard played card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
    #####:  768:      return 0;
        -:  769:		
        -:  770:    case baron:
    #####:  771:      state->numBuys++;//Increase buys by 1!
    #####:  772:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  773:	int p = 0;//Iterator for hand!
    #####:  774:	int card_not_discarded = 1;//Flag for discard set!
    #####:  775:	while(card_not_discarded){
    #####:  776:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  777:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  778:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  779:	    state->discardCount[currentPlayer]++;
    #####:  780:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  781:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  782:	    }
    #####:  783:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  784:	    state->handCount[currentPlayer]--;
    #####:  785:	    card_not_discarded = 0;//Exit the loop
    #####:  786:	  }
    #####:  787:	  else if (p > state->handCount[currentPlayer]){
        -:  788:	    if(DEBUG) {
        -:  789:	      printf("No estate cards in your hand, invalid choice\n");
        -:  790:	      printf("Must gain an estate if there are any\n");
        -:  791:	    }
    #####:  792:	    if (supplyCount(estate, state) > 0){
    #####:  793:	      gainCard(estate, state, 0, currentPlayer);
    #####:  794:	      state->supplyCount[estate]--;//Decrement estates
    #####:  795:	      if (supplyCount(estate, state) == 0){
    #####:  796:		isGameOver(state);
    #####:  797:	      }
    #####:  798:	    }
    #####:  799:	    card_not_discarded = 0;//Exit the loop
    #####:  800:	  }
        -:  801:			    
        -:  802:	  else{
    #####:  803:	    p++;//Next card
        -:  804:	  }
        -:  805:	}
    #####:  806:      }
        -:  807:			    
        -:  808:      else{
    #####:  809:	if (supplyCount(estate, state) > 0){
    #####:  810:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  811:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  812:	  if (supplyCount(estate, state) == 0){
    #####:  813:	    isGameOver(state);
    #####:  814:	  }
    #####:  815:	}
        -:  816:      }
        -:  817:	    
        -:  818:      
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case great_hall:
        -:  822:      //+1 Card
    #####:  823:      drawCard(currentPlayer, state);
        -:  824:			
        -:  825:      //+1 Actions
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case minion:
        -:  833:      //+1 action
    #####:  834:      state->numActions++;
        -:  835:			
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
        -:  838:			
    #####:  839:      if (choice1)		//+2 coins
        -:  840:	{
    #####:  841:	  state->coins = state->coins + 2;
    #####:  842:	}
        -:  843:			
    #####:  844:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  845:	{
        -:  846:	  //discard hand
    #####:  847:	  while(numHandCards(state) > 0)
        -:  848:	    {
    #####:  849:	      discardCard(handPos, currentPlayer, state, 0);
        -:  850:	    }
        -:  851:				
        -:  852:	  //draw 4
    #####:  853:	  for (i = 0; i < 4; i++)
        -:  854:	    {
    #####:  855:	      drawCard(currentPlayer, state);
    #####:  856:	    }
        -:  857:				
        -:  858:	  //other players discard hand and redraw if hand size > 4
    #####:  859:	  for (i = 0; i < state->numPlayers; i++)
        -:  860:	    {
    #####:  861:	      if (i != currentPlayer)
        -:  862:		{
    #####:  863:		  if ( state->handCount[i] > 4 )
        -:  864:		    {
        -:  865:		      //discard hand
    #####:  866:		      while( state->handCount[i] > 0 )
        -:  867:			{
    #####:  868:			  discardCard(handPos, i, state, 0);
        -:  869:			}
        -:  870:							
        -:  871:		      //draw 4
    #####:  872:		      for (j = 0; j < 4; j++)
        -:  873:			{
    #####:  874:			  drawCard(i, state);
    #####:  875:			}
    #####:  876:		    }
    #####:  877:		}
    #####:  878:	    }
        -:  879:				
    #####:  880:	}
    #####:  881:      return 0;
        -:  882:		
        -:  883:    case steward:
    #####:  884:      if (choice1 == 1)
        -:  885:	{
        -:  886:	  //+2 cards
    #####:  887:	  drawCard(currentPlayer, state);
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	}
    #####:  890:      else if (choice1 == 2)
        -:  891:	{
        -:  892:	  //+2 coins
    #####:  893:	  state->coins = state->coins + 2;
    #####:  894:	}
        -:  895:      else
        -:  896:	{
        -:  897:	  //trash 2 cards in hand
    #####:  898:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  899:	  discardCard(choice3, currentPlayer, state, 1);
        -:  900:	}
        -:  901:			
        -:  902:      //discard card from hand
    #####:  903:      discardCard(handPos, currentPlayer, state, 0);
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case tribute:
    #####:  907:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  908:	if (state->deckCount[nextPlayer] > 0){
    #####:  909:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  910:	  state->deckCount[nextPlayer]--;
    #####:  911:	}
    #####:  912:	else if (state->discardCount[nextPlayer] > 0){
    #####:  913:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  914:	  state->discardCount[nextPlayer]--;
    #####:  915:	}
        -:  916:	else{
        -:  917:	  //No Card to Reveal
        -:  918:	  if (DEBUG){
        -:  919:	    printf("No cards to reveal\n");
        -:  920:	  }
        -:  921:	}
    #####:  922:      }
        -:  923:	    
        -:  924:      else{
    #####:  925:	if (state->deckCount[nextPlayer] == 0){
    #####:  926:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  927:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  928:	    state->deckCount[nextPlayer]++;
    #####:  929:	    state->discard[nextPlayer][i] = -1;
    #####:  930:	    state->discardCount[nextPlayer]--;
    #####:  931:	  }
        -:  932:			    
    #####:  933:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  934:	} 
    #####:  935:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  936:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  937:	state->deckCount[nextPlayer]--;
    #####:  938:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
        -:  941:      }    
        -:  942:		       
    #####:  943:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  944:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  945:	state->playedCardCount++;
    #####:  946:	tributeRevealedCards[1] = -1;
    #####:  947:      }
        -:  948:
    #####:  949:      for (i = 0; i <= 2; i ++){
    #####:  950:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  951:	  state->coins += 2;
    #####:  952:	}
        -:  953:		    
    #####:  954:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  955:	  drawCard(currentPlayer, state);
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	}
        -:  958:	else{//Action Card
    #####:  959:	  state->numActions = state->numActions + 2;
        -:  960:	}
    #####:  961:      }
        -:  962:	    
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case ambassador:
    #####:  966:      j = 0;		//used to check if player has enough cards to discard
        -:  967:
    #####:  968:      if (choice2 > 2 || choice2 < 0)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
    #####:  973:      if (choice1 == handPos)
        -:  974:	{
    #####:  975:	  return -1;
        -:  976:	}
        -:  977:
    #####:  978:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  979:	{
    #####:  980:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  981:	    {
    #####:  982:	      j++;
    #####:  983:	    }
    #####:  984:	}
    #####:  985:      if (j < choice2)
        -:  986:	{
    #####:  987:	  return -1;				
        -:  988:	}
        -:  989:
        -:  990:      if (DEBUG) 
        -:  991:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  992:
        -:  993:      //increase supply count for choosen card by amount being discarded
    #####:  994:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  995:			
        -:  996:      //each other player gains a copy of revealed card
    #####:  997:      for (i = 0; i < state->numPlayers; i++)
        -:  998:	{
    #####:  999:	  if (i != currentPlayer)
        -: 1000:	    {
    #####: 1001:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1002:	    }
    #####: 1003:	}
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
        -: 1008:      //trash copies of cards returned to supply
    #####: 1009:      for (j = 0; j < choice2; j++)
        -: 1010:	{
    #####: 1011:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1012:	    {
    #####: 1013:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1014:		{
    #####: 1015:		  discardCard(i, currentPlayer, state, 1);
    #####: 1016:		  break;
        -: 1017:		}
    #####: 1018:	    }
    #####: 1019:	}			
        -: 1020:
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case cutpurse:
        -: 1024:
    #####: 1025:      updateCoins(currentPlayer, state, 2);
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
        -: 1029:	    {
    #####: 1030:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1031:		{
    #####: 1032:		  if (state->hand[i][j] == copper)
        -: 1033:		    {
    #####: 1034:		      discardCard(j, i, state, 0);
    #####: 1035:		      break;
        -: 1036:		    }
    #####: 1037:		  if (j == state->handCount[i])
        -: 1038:		    {
    #####: 1039:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1040:			{
        -: 1041:			  if (DEBUG)
        -: 1042:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1043:			}	
    #####: 1044:		      break;
        -: 1045:		    }		
    #####: 1046:		}
        -: 1047:					
    #####: 1048:	    }
        -: 1049:				
    #####: 1050:	}				
        -: 1051:
        -: 1052:      //discard played card from hand
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:
        -: 1057:		
        -: 1058:    case embargo: 
        -: 1059:      //+2 Coins
    #####: 1060:      state->coins = state->coins + 2;
        -: 1061:			
        -: 1062:      //see if selected pile is in play
    #####: 1063:      if ( state->supplyCount[choice1] == -1 )
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //add embargo token to selected supply pile
    #####: 1069:      state->embargoTokens[choice1]++;
        -: 1070:			
        -: 1071:      //trash card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case outpost:
        -: 1076:      //set outpost flag
    #####: 1077:      state->outpostPlayed++;
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case salvager:
        -: 1084:      //+1 buy
    #####: 1085:      state->numBuys++;
        -: 1086:			
    #####: 1087:      if (choice1)
        -: 1088:	{
        -: 1089:	  //gain coins equal to trashed card
    #####: 1090:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1091:	  //trash card
    #####: 1092:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1093:	}
        -: 1094:			
        -: 1095:      //discard card
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1097:      return 0;
        -: 1098:		
        -: 1099:    case sea_hag:
    #####: 1100:      for (i = 0; i < state->numPlayers; i++){
    #####: 1101:	if (i != currentPlayer){
    #####: 1102:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1103:	  state->discardCount[i]++;
    #####: 1104:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1105:	}
    #####: 1106:      }
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case treasure_map:
        -: 1110:      //search hand for another treasure_map
    #####: 1111:      index = -1;
    #####: 1112:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	{
    #####: 1114:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1115:	    {
    #####: 1116:	      index = i;
    #####: 1117:	      break;
        -: 1118:	    }
    #####: 1119:	}
    #####: 1120:      if (index > -1)
        -: 1121:	{
        -: 1122:	  //trash both treasure cards
    #####: 1123:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1124:	  discardCard(index, currentPlayer, state, 1);
        -: 1125:
        -: 1126:	  //gain 4 Gold cards
    #####: 1127:	  for (i = 0; i < 4; i++)
        -: 1128:	    {
    #####: 1129:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1130:	    }
        -: 1131:				
        -: 1132:	  //return success
    #####: 1133:	  return 1;
        -: 1134:	}
        -: 1135:			
        -: 1136:      //no second treasure_map found in hand
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
    #####: 1140:  return -1;
        2: 1141:}
        -: 1142:
        -: 1143:int gardenEffect() {
    #####: 1144:printf("Your father was a hamster and your mother smelt of elderberries.");
    #####: 1145:return -1;
        -: 1146:}
        -: 1147:
        -: 1148:int smithyEffect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1149:  int i;
        -: 1150:
        2: 1151:  int tributeRevealedCards[2] = {-1, -1};
        -: 1152:  int temphand[MAX_HAND];// moved above the if statement
        -: 1153:
        2: 1154:  int z = 0;// this is the counter for the temp hand
        8: 1155:for (i = 0; i < 1; i++)
        -: 1156:	{
        2: 1157:	  drawCard(currentPlayer, state);
        2: 1158:	}
        -: 1159:			
        -: 1160:      //discard card from hand
        2: 1161:      discardCard(handPos, currentPlayer, state, 0);
        2: 1162:      return 0;
        -: 1163:}
        -: 1164:
        -: 1165:int council_room_effect(struct gameState *state, int currentPlayer, int handPos) {
        -: 1166:      int i;
        -: 1167:      //+4 Cards
       20: 1168:      for (i = 0; i < 4; i++)
        -: 1169:	{
        8: 1170:	  drawCard(currentPlayer, state);
        8: 1171:	}
        -: 1172:			
        -: 1173:      //+1 Buy
        2: 1174:      state->numBuys++;
        -: 1175:			
        -: 1176:      //Each other player draws a card
       12: 1177:      for (i = 0; i < state->numPlayers; i++)
        -: 1178:	{
        4: 1179:	  if ( i != currentPlayer )
        -: 1180:	    {
        2: 1181:	      drawCard(i, state);
        2: 1182:	    }
        4: 1183:	}
        -: 1184:			
        -: 1185:      //put played card in played card pile
        -: 1186:      //discardCard(handPos, currentPlayer, state, 0);
        -: 1187:			
        2: 1188:      return 0;
        -: 1189:}
        -: 1190:
        -: 1191:int feastEffect(struct gameState *state, int currentPlayer, int choice1) {
        -: 1192:	int i;
        -: 1193:	int x;
        -: 1194:	int temphand[MAX_HAND];
        -: 1195:	
        -: 1196:	      //gain card with cost up to 5
        -: 1197:      //Backup hand
    #####: 1198:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1199:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1200:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1201:      }
        -: 1202:      //Backup hand
        -: 1203:
        -: 1204:      //Update Coins for Buy
    #####: 1205:      updateCoins(currentPlayer, state, 5);
    #####: 1206:      x = 1;//Condition to loop on
    #####: 1207:      while( x == 1) {//Buy one card
    #####: 1208:	if (supplyCount(choice1, state) <= 0){
        -: 1209:	  if (DEBUG)
        -: 1210:	    printf("None of that card left, sorry!\n");
        -: 1211:
        -: 1212:	  if (DEBUG){
        -: 1213:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1214:	  }
    #####: 1215:	}
    #####: 1216:	else if (state->coins < getCost(choice1)){
    #####: 1217:	  printf("That card is too expensive!\n");
        -: 1218:
        -: 1219:	  if (DEBUG){
        -: 1220:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1221:	  }
    #####: 1222:	}
        -: 1223:	else{
        -: 1224:
        -: 1225:	  if (DEBUG){
        -: 1226:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1227:	  }
        -: 1228:
    #####: 1229:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1230:	  x = 0;//No more buying cards
        -: 1231:
        -: 1232:	  if (DEBUG){
        -: 1233:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1234:	  }
        -: 1235:
        -: 1236:	}
        -: 1237:      }     
        -: 1238:
        -: 1239:      //Reset Hand
    #####: 1240:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1241:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1242:	temphand[i] = -1;
    #####: 1243:      }
        -: 1244:      //Reset Hand
        -: 1245:      			
    #####: 1246:      return 0;
        -: 1247:	
        -: 1248:}
        -: 1249:
        -: 1250:int adventurerEffect(struct gameState *state, int currentPlayer) {
        -: 1251:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1252:	int drawntreasure=0;
        -: 1253:	int cardDrawn;
    #####: 1254:	int z = 0;// this is the counter for the temp hand
        -: 1255:    
    #####: 1256:      while(drawntreasure<2){
    #####: 1257:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1258:	  shuffle(currentPlayer, state);
    #####: 1259:	}
    #####: 1260:	drawCard(currentPlayer, state);
    #####: 1261:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1262:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1263:	  drawntreasure++;
        -: 1264:	else{
    #####: 1265:	  temphand[z]=cardDrawn;
    #####: 1266:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1267:	  z++;
        -: 1268:	}
        -: 1269:      }
    #####: 1270:      while(z-1>=0){
    #####: 1271:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1272:	z=z-1;
        -: 1273:      }
    #####: 1274:      return 0;
        -: 1275:}
        -: 1276:
        -: 1277:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1278:{
        -: 1279:	
        -: 1280:  //if card is not trashed, added to Played pile 
        2: 1281:  if (trashFlag < 1)
        -: 1282:    {
        -: 1283:      //add card to played pile
        2: 1284:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1285:      state->playedCardCount++;
        2: 1286:    }
        -: 1287:	
        -: 1288:  //set played card to -1
        2: 1289:  state->hand[currentPlayer][handPos] = -1;
        -: 1290:	
        -: 1291:  //remove card from player's hand
        2: 1292:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
    #####: 1296:    }
        2: 1297:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1298:    {
        -: 1299:      //reduce number of cards in hand
    #####: 1300:      state->handCount[currentPlayer]--;
    #####: 1301:    }
        -: 1302:  else 	
        -: 1303:    {
        -: 1304:      //replace discarded card with last card in hand
        2: 1305:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1306:      //set last card to -1
        2: 1307:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1308:      //reduce number of cards in hand
        2: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        -: 1311:	
        2: 1312:  return 0;
        -: 1313:}
        -: 1314:
        -: 1315:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1316:{
        -: 1317:  //Note: supplyPos is enum of choosen card
        -: 1318:	
        -: 1319:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1320:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1321:    {
    #####: 1322:      return -1;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //added card for [whoseTurn] current player:
        -: 1326:  // toFlag = 0 : add to discard
        -: 1327:  // toFlag = 1 : add to deck
        -: 1328:  // toFlag = 2 : add to hand
        -: 1329:
        2: 1330:  if (toFlag == 1)
        -: 1331:    {
    #####: 1332:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1333:      state->deckCount[player]++;
    #####: 1334:    }
        2: 1335:  else if (toFlag == 2)
        -: 1336:    {
    #####: 1337:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1338:      state->handCount[player]++;
    #####: 1339:    }
        -: 1340:  else
        -: 1341:    {
        2: 1342:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1343:      state->discardCount[player]++;
        -: 1344:    }
        -: 1345:	
        -: 1346:  //decrease number in supply pile
        2: 1347:  state->supplyCount[supplyPos]--;
        -: 1348:	 
        2: 1349:  return 0;
        2: 1350:}
        -: 1351:
        -: 1352:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1353:{
        -: 1354:  int i;
        -: 1355:	
        -: 1356:  //reset coin count
       12: 1357:  state->coins = 0;
        -: 1358:
        -: 1359:  //add coins for each Treasure card in player's hand
      144: 1360:  for (i = 0; i < state->handCount[player]; i++)
        -: 1361:    {
       60: 1362:      if (state->hand[player][i] == copper)
        -: 1363:	{
       42: 1364:	  state->coins += 1;
       42: 1365:	}
       18: 1366:      else if (state->hand[player][i] == silver)
        -: 1367:	{
    #####: 1368:	  state->coins += 2;
    #####: 1369:	}
       18: 1370:      else if (state->hand[player][i] == gold)
        -: 1371:	{
    #####: 1372:	  state->coins += 3;
    #####: 1373:	}	
       60: 1374:    }	
        -: 1375:
        -: 1376:  //add bonus
       12: 1377:  state->coins += bonus;
        -: 1378:
       12: 1379:  return 0;
        -: 1380:}
        -: 1381:
        -: 1382:
        -: 1383://end of dominion.c
